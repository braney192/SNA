{"version":3,"sources":["YoutubeController.js"],"names":["getYoutubeID","url","undefined","match","length","getYoutubeID__Banner","regExp","tag","document","createElement","src","player","player__banner","firstScriptTag","getElementsByTagName","youtubeItems","Array","from","querySelectorAll","bannerYoutubeItems","onYouTubeIframeAPIReady","Date","i","setAttribute","idRandom","elementId","getTime","toString","substring","Player","getAttribute","height","videoId","width","playerVars","autoplay","showinfo","controls","YT","events","onReady","onStateChange","onPlayerStateChange","onPlayerReady","event","mute","done","data","PlayerState","PLAYING","setTimeout","stopVideo"],"mappings":"aACA,IAAMA,aAAe,SAACC,GADtB,QAAAC,IAAAD,EAQG,OAAA,EAPH,IACKA,EAAQC,EAAAA,MADPF,+EAEJ,SAAAG,GAAa,IAAHA,EAAG,GAAAC,SACTD,EAAQF,IAQZI,qBAAA,SAAAJ,GAXF,QAAAC,IAAAD,EAoBG,OAFD,EAFA,IAFII,EAAAA,EAAAA,MAES,+EADd,SAAIJ,GAAmB,IAAXC,EAAAA,GAAZE,SACKE,EAAM,IASVC,IAAAC,SAAAC,cAAA,UAMFF,IAAIG,IAAM,qCACV,IAIAC,OAEIC,eANAC,eAAiBL,SAASM,qBAAqB,UAAU,GAM7D,SAAIF,0BAGH,IAAA,IAAMG,EAAeC,MAAMC,KAAKT,SAASU,iBAAiB,iBAD3DC,EAASC,MAATH,KAAmCT,SAAAU,iBAAA,wBAC5BH,EAAAA,EAAAA,EAAeC,EAAWR,OAASU,IAAAA,CACzC,IAAMC,GAAAA,IAAkBE,MAAGL,UAAWR,SAASU,IAAAA,UAAiB,GAG/DH,EAAaO,GAAGC,aAAa,KAAMC,GAFpC,IAAKC,EAAYV,EAAGA,GAAaX,aAAa,MACvCoB,EAAQxB,aAAe0B,EAAWC,GAAAA,aAAaC,aAErDjB,OAAMc,IAAAA,GAASI,OAAGd,EAAgBe,CAClCC,OAAMC,OAENrB,MAAM,OACLoB,QAAMC,EACNC,OAAK,CACLD,QAASA,eAERE,WAAA,CADOC,SAJyB,EAOjCD,IAAAA,EACCE,SAAA,EACAC,SAFW,KAPqB,IAAlC,IAAAf,EAAA,EAAAA,EAAAH,EAAAf,OAAAkB,IAAA,CAcA,IAAAE,GAAA,IAAAH,MAAAK,UAAAC,SAAA,IAAAC,UAAA,GAGAT,EAAmBG,GAAGC,aAAa,KAAMC,GAF1C,IAAKC,EAAWH,EAAIH,GAAkBW,aAAtC,MACON,EAAQxB,aAAe0B,EAAoBJ,GAAhCQ,aAAjB,aAIAlB,eAAiB,IAAI0B,GAAGT,OAAOJ,EAAW,CAH1CN,OAAAA,OAKCc,MAAO,OAJRD,QAAMP,EAMLc,OAAQ,CALTC,QAAMR,cAOJS,cAAiBC,qBALlBX,WAAQ,CACRE,SAAO,EACPD,SAASA,MAKG,SAAAW,cAAAC,GAKbhC,eAAAiC,OArDFhC,eAAUL,WAASC,aAAcF,IAAjCM,gBA2DC,IAAAiC,MAAA,EAEA,SAEDJ,oBAAAE,GACAA,EAAAG,MAAAT,GAAAU,YAAAC,SAAAH,OACAI,WAAAC,UAAA,KAMEL,MAAO,GAHT,SAASJ,YACR/B,QACCuC,OAAAA","file":"YoutubeController.min.js","sourcesContent":["// Get youtube ID from URL\nconst getYoutubeID = (url) => {\n\tif (url !== undefined) {\n\t\tvar regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n\t\tvar match = url.match(regExp);\n\t\tif (match && match[7].length == 11) {\n\t\t\treturn match[7];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\nconst getYoutubeID__Banner = (url) => {\n\tif (url !== undefined) {\n\t\tvar regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n\t\tvar match = url.match(regExp);\n\t\tif (match && match[7].length == 11) {\n\t\t\treturn match[7];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n// This code loads the IFrame Player API code asynchronously.\nvar tag = document.createElement('script');\n\ntag.src = \"https://www.youtube.com/iframe_api\";\nvar firstScriptTag = document.getElementsByTagName('script')[3];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n// This function creates an <iframe> (and YouTube player)\n//    after the API code downloads.\nvar player;\nvar player__banner;\n\nfunction onYouTubeIframeAPIReady() {\n\tconst youtubeItems = Array.from(document.querySelectorAll(\".youtube-api\"));\n\tconst bannerYoutubeItems = Array.from(document.querySelectorAll(\".banner-youtube-api\"));\n\tfor (let i = 0; i < youtubeItems.length; i++) {\n\t\tconst idRandom = (new Date().getTime()).toString(32).substring(4);\n\t\tyoutubeItems[i].setAttribute('id', idRandom)\n\t\tconst elementId = youtubeItems[i].getAttribute('id');\n\t\tconst videoId = getYoutubeID(youtubeItems[i].getAttribute('data-url'));\n\n\t\tplayer = new YT.Player(elementId, {\n\t\t\theight: '100%',\n\t\t\twidth: '100%',\n\t\t\tvideoId: videoId,\n\t\t\tevents: {\n\t\t\t\t'onReady': onPlayerReady,\n\t\t\t},\n\t\t\tplayerVars: {\n\t\t\t\t'autoplay': 0,\n\t\t\t\t'rel': 0,\n\t\t\t\t'showinfo': 0,\n\t\t\t\t'controls': 1\n\t\t\t},\n\t\t});\n\t}\n\tfor (let i = 0; i < bannerYoutubeItems.length; i++) {\n\t\tconst idRandom = (new Date().getTime()).toString(32).substring(4);\n\t\tbannerYoutubeItems[i].setAttribute('id', idRandom)\n\t\tconst elementId = bannerYoutubeItems[i].getAttribute('id');\n\t\tconst videoId = getYoutubeID(bannerYoutubeItems[i].getAttribute('data-url'));\n\t\tplayer__banner = new YT.Player(elementId, {\n\t\t\theight: '100%',\n\t\t\twidth: '100%',\n\t\t\tvideoId: videoId,\n\t\t\tevents: {\n\t\t\t\t'onReady': onPlayerReady,\n\t\t\t\t'onStateChange': onPlayerStateChange\n\t\t\t},\n\t\t\tplayerVars: {\n\t\t\t\t'autoplay': 1,\n\t\t\t\t'controls': 0\n\t\t\t},\n\t\t});\n\t}\n}\n\n// OFF AUTOUPLAY\n// 4. The API will call this function when the video player is ready.\nfunction onPlayerReady(event) {\n\t// event.target.playVideo();\n\tplayer__banner.mute();\n}\n\n// 5. The API calls this function when the player's state changes.\n//    The function indicates that when playing a video (state=1),\n//    the player should play for six seconds and then stop.\nvar done = false;\n\nfunction onPlayerStateChange(event) {\n\tif (event.data == YT.PlayerState.PLAYING && !done) {\n\t\tsetTimeout(stopVideo, 6000);\n\t\tdone = true;\n\t}\n}\n\nfunction stopVideo() {\n\tif (player) {\n\t\tplayer.stopVideo();\n\t}\n}"]}